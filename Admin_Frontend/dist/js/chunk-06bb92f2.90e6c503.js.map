{"version":3,"sources":["webpack:///./src/router/views/forms/validation.vue","webpack:///./src/router/views/forms/validation.vue?2575","webpack:///./node_modules/@vuelidate/validators/dist/index.esm.js"],"names":["class","for","type","id","required","title","items","formSubmit","form","fname","placeholder","submitted","v$","$error","$message","lname","city","state","zipcode","tooltipForm","tooltipform","username","aria-describedby","action","typeForm","typeform","name","password","$errors","item","index","key","confirmPassword","email","url","digit","number","alphanum","textarea","rows","typesubmit","rangeform","range","minlen","submit","maxlength","between","minval","maxval","rangeval","expr","page","meta","content","description","components","Layout","PageHeader","data","text","href","active","submitform","setup","validations","withMessage","minLength","maxLength","minValue","maxValue","sameAsPassword","numeric","alphaNum","methods","e","this","$touch","__exports__","render","isFunction","val","isObject","o","Array","isArray","normalizeValidatorObject","validator","$validator","Object","assign","unwrapValidatorResponse","result","$valid","unwrapNormalizedValidator","withParams","$params","Error","validatorObj","withAsync","$watchTargets","$async","forEach","validators","collection","others","reduce","previous","collectionItem","collectionEntryResult","entries","all","property","$model","innerValidators","propertyResult","validatorName","currentValidator","validatorFunction","$response","call","$data","$invalid","$pending","push","$property","concat","map","context","values","errors","error","a","b","req","value","length","undefined","Date","isNaN","getTime","_","String","len","keys","regex","test","common","freeze","__proto__","unwrap","alphaNum$1","numeric$1","emailRegex","email$1","maxLength$1","max","minLength$1","min","required$1","trim","sameAs$1","equalTo","sameAs","otherName","urlRegex","url$1","minValue$1","maxValue$1"],"mappings":"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","file":"js/chunk-06bb92f2.90e6c503.js","sourcesContent":["<script>\r\nimport Layout from \"../../layouts/main\";\r\nimport PageHeader from \"@/components/page-header\";\r\nimport appConfig from \"@/app.config\";\r\nimport useVuelidate from \"@vuelidate/core\";\r\n\r\nimport {\r\n  required,\r\n  helpers,\r\n  email,\r\n  minLength,\r\n  sameAs,\r\n  maxLength,\r\n  minValue,\r\n  maxValue,\r\n  numeric,\r\n  url,\r\n  alphaNum,\r\n} from \"@vuelidate/validators\";\r\n\r\n/**\r\n * Form validation component\r\n */\r\nexport default {\r\n  page: {\r\n    title: \"Form Validation\",\r\n    meta: [{ name: \"description\", content: appConfig.description }],\r\n  },\r\n  components: { Layout, PageHeader },\r\n  data() {\r\n    return {\r\n      title: \"Form Validation\",\r\n      items: [\r\n        {\r\n          text: \"Forms\",\r\n          href: \"/\",\r\n        },\r\n        {\r\n          text: \"Form Validation\",\r\n          active: true,\r\n        },\r\n      ],\r\n      form: {\r\n        fname: \"\",\r\n        lname: \"\",\r\n        city: \"\",\r\n        state: \"\",\r\n        zipcode: \"\",\r\n      },\r\n      tooltipform: {\r\n        fname: \"\",\r\n        lname: \"\",\r\n        username: \"\",\r\n        city: \"\",\r\n        state: \"\",\r\n      },\r\n      range: {\r\n        minlen: \"\",\r\n        maxlength: \"\",\r\n        between: \"\",\r\n        minval: \"\",\r\n        maxval: \"\",\r\n        rangeval: \"\",\r\n        expr: \"\",\r\n      },\r\n      typeform: {\r\n        name: \"\",\r\n        password: \"\",\r\n        confirmPassword: \"\",\r\n        email: \"\",\r\n        url: \"\",\r\n        digit: \"\",\r\n        number: \"\",\r\n        alphanum: \"\",\r\n        textarea: \"\",\r\n      },\r\n      submitted: false,\r\n      submitform: false,\r\n      submit: false,\r\n      typesubmit: false,\r\n    };\r\n  },\r\n  setup() {\r\n    return { v$: useVuelidate() };\r\n  },\r\n  validations: {\r\n    form: {\r\n      fname: {\r\n        required: helpers.withMessage(\"First Name is required\", required),\r\n      },\r\n      lname: {\r\n        required: helpers.withMessage(\"Last Name is required\", required),\r\n      },\r\n      city: { required: helpers.withMessage(\"City is required\", required) },\r\n      state: { required: helpers.withMessage(\"State is required\", required) },\r\n      zipcode: {\r\n        required: helpers.withMessage(\"Zipcode is required\", required),\r\n      },\r\n    },\r\n    tooltipform: {\r\n      fname: { required: helpers.withMessage(\"Fname is required\", required) },\r\n      lname: { required: helpers.withMessage(\"Lname is required\", required) },\r\n      username: {\r\n        required: helpers.withMessage(\"Username is required\", required),\r\n      },\r\n      city: { required: helpers.withMessage(\"City is required\", required) },\r\n      state: { required: helpers.withMessage(\"State is required\", required) },\r\n    },\r\n    range: {\r\n      minlen: {\r\n        required: helpers.withMessage(\"Minlen is required\", required),\r\n        minLength: minLength(6),\r\n      },\r\n      maxlength: {\r\n        required: helpers.withMessage(\"Maxlength is required\", required),\r\n        maxLength: maxLength(6),\r\n      },\r\n      between: {\r\n        required: helpers.withMessage(\"Between is required\", required),\r\n        minLength: minLength(5),\r\n        maxLength: maxLength(10),\r\n      },\r\n      minval: {\r\n        required: helpers.withMessage(\"Minval is required\", required),\r\n        minValue: minValue(6),\r\n      },\r\n      maxval: {\r\n        required: helpers.withMessage(\"Maxval is required\", required),\r\n        maxValue: maxValue(6),\r\n      },\r\n      rangeval: {\r\n        required: helpers.withMessage(\"Rangeval is required\", required),\r\n        minValue: minValue(6),\r\n        maxValue: maxValue(100),\r\n      },\r\n      expr: { required: helpers.withMessage(\"Expr is required\", required) },\r\n    },\r\n    typeform: {\r\n      name: { required: helpers.withMessage(\"Name is required\", required) },\r\n      password: {\r\n        required: helpers.withMessage(\"Password is required\", required),\r\n        minLength: minLength(6),\r\n      },\r\n      confirmPassword: {\r\n        required: helpers.withMessage(\"ConfirmPassword is required\", required),\r\n        sameAsPassword: sameAs(\"password\"),  \r\n      },\r\n      email: {\r\n        required: helpers.withMessage(\"Email is required\", required),\r\n        email,\r\n      },\r\n      url: { required: helpers.withMessage(\"Url is required\", required), url },\r\n      digit: {\r\n        required: helpers.withMessage(\"Digit is required\", required),\r\n        numeric,\r\n      },\r\n      number: {\r\n        required: helpers.withMessage(\"Number is required\", required),\r\n        numeric,\r\n      },\r\n      alphanum: {\r\n        required: helpers.withMessage(\"Alphanum is required\", required),\r\n        alphaNum,\r\n      },\r\n      textarea: {\r\n        required: helpers.withMessage(\"Textarea is required\", required),\r\n      },\r\n    },\r\n  },\r\n  methods: {\r\n    // eslint-disable-next-line no-unused-vars\r\n    formSubmit(e) {\r\n      this.submitted = true;\r\n      // stop here if form is invalid\r\n      this.v$.$touch();\r\n    },\r\n\r\n    tooltipForm() {\r\n      this.submitform = true;\r\n      this.v$.$touch();\r\n    },\r\n\r\n    /**\r\n     * Range validation form submit\r\n     */\r\n    // eslint-disable-next-line no-unused-vars\r\n    rangeform(e) {\r\n      this.submit = true;\r\n      // stop here if form is invalid\r\n      this.v$.$touch();\r\n    },\r\n    /**\r\n     * Validation type submit\r\n     */\r\n    // eslint-disable-next-line no-unused-vars\r\n    typeForm(e) {\r\n      this.typesubmit = true;\r\n      // stop here if form is invalid\r\n      this.v$.$touch();\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<template>\r\n  <Layout>\r\n    <PageHeader :title=\"title\" :items=\"items\" />\r\n    <div class=\"row\">\r\n      <div class=\"col-lg-6\">\r\n        <div class=\"card\">\r\n          <div class=\"card-body\">\r\n            <h4 class=\"card-title\">Bootstrap Validation - Normal</h4>\r\n            <p class=\"card-title-desc\">\r\n              Provide valuable, actionable feedback to your users with HTML5\r\n              form validation–available in all our supported browsers.\r\n            </p>\r\n            <form class=\"needs-validation\" @submit.prevent=\"formSubmit\">\r\n              <div class=\"row\">\r\n                <div class=\"col-md-6\">\r\n                  <div class=\"mb-3\">\r\n                    <label for=\"validationCustom01\">First name</label>\r\n                    <input\r\n                      id=\"validationCustom01\"\r\n                      v-model=\"form.fname\"\r\n                      type=\"text\"\r\n                      class=\"form-control\"\r\n                      placeholder=\"First name\"\r\n                      :class=\"{\r\n                        'is-invalid': submitted && v$.form.fname.$error,\r\n                      }\"\r\n                    />\r\n                    <div\r\n                      v-if=\"submitted && v$.form.fname.$error\"\r\n                      class=\"invalid-feedback\"\r\n                    >\r\n                      <span v-if=\"v$.form.fname.required.$message\">{{\r\n                        v$.form.fname.required.$message\r\n                      }}</span>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div class=\"col-md-6\">\r\n                  <div class=\"mb-3\">\r\n                    <label for=\"validationCustom02\">Last name</label>\r\n                    <input\r\n                      id=\"validationCustom02\"\r\n                      v-model=\"form.lname\"\r\n                      type=\"text\"\r\n                      class=\"form-control\"\r\n                      placeholder=\"Last name\"\r\n                      :class=\"{\r\n                        'is-invalid': submitted && v$.form.lname.$error,\r\n                      }\"\r\n                    />\r\n                    <div\r\n                      v-if=\"submitted && v$.form.lname.$error\"\r\n                      class=\"invalid-feedback\"\r\n                    >\r\n                      <span v-if=\"v$.form.lname.required.$message\">{{\r\n                        v$.form.lname.required.$message\r\n                      }}</span>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div class=\"row\">\r\n                <div class=\"col-md-4\">\r\n                  <div class=\"mb-3\">\r\n                    <label for=\"validationCustom03\">City</label>\r\n                    <input\r\n                      id=\"validationCustom03\"\r\n                      v-model=\"form.city\"\r\n                      type=\"text\"\r\n                      class=\"form-control\"\r\n                      placeholder=\"City\"\r\n                      :class=\"{\r\n                        'is-invalid': submitted && v$.form.city.$error,\r\n                      }\"\r\n                    />\r\n                    <div\r\n                      v-if=\"submitted && v$.form.city.$error\"\r\n                      class=\"invalid-feedback\"\r\n                    >\r\n                      <span v-if=\"v$.form.city.required.$message\">{{\r\n                        v$.form.city.required.$message\r\n                      }}</span>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div class=\"col-md-4\">\r\n                  <div class=\"mb-3\">\r\n                    <label for=\"validationCustom04\">State</label>\r\n                    <input\r\n                      id=\"validationCustom04\"\r\n                      v-model=\"form.state\"\r\n                      type=\"text\"\r\n                      class=\"form-control\"\r\n                      placeholder=\"State\"\r\n                      :class=\"{\r\n                        'is-invalid': submitted && v$.form.state.$error,\r\n                      }\"\r\n                    />\r\n                    <div\r\n                      v-if=\"submitted && v$.form.state.$error\"\r\n                      class=\"invalid-feedback\"\r\n                    >\r\n                      <span v-if=\"v$.form.state.required.$message\">{{\r\n                        v$.form.state.required.$message\r\n                      }}</span>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div class=\"col-md-4\">\r\n                  <div class=\"mb-3\">\r\n                    <label for=\"validationCustom05\">Zip</label>\r\n                    <input\r\n                      id=\"validationCustom05\"\r\n                      v-model=\"form.zipcode\"\r\n                      type=\"text\"\r\n                      class=\"form-control\"\r\n                      placeholder=\"Zip\"\r\n                      :class=\"{\r\n                        'is-invalid': submitted && v$.form.zipcode.$error,\r\n                      }\"\r\n                    />\r\n                    <div\r\n                      v-if=\"submitted && v$.form.zipcode.$error\"\r\n                      class=\"invalid-feedback\"\r\n                    >\r\n                      <span v-if=\"v$.form.zipcode.required.$message\">{{\r\n                        v$.form.zipcode.required.$message\r\n                      }}</span>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div class=\"form-check mb-3\">\r\n                <input\r\n                  class=\"form-check-input\"\r\n                  type=\"checkbox\"\r\n                  id=\"invalidCheck\"\r\n                  required=\"\"\r\n                />\r\n                <label class=\"form-check-label\" for=\"invalidCheck\">\r\n                  Agree to terms and conditions\r\n                </label>\r\n                <div class=\"invalid-feedback\">\r\n                  You must agree before submitting.\r\n                </div>\r\n              </div>\r\n              <button class=\"btn btn-primary\" type=\"submit\">Submit form</button>\r\n            </form>\r\n          </div>\r\n        </div>\r\n        <!-- end card -->\r\n      </div>\r\n      <!-- end col -->\r\n      <div class=\"col-lg-6\">\r\n        <div class=\"card\">\r\n          <div class=\"card-body\">\r\n            <h4 class=\"card-title\">Bootstrap Validation (Tooltips)</h4>\r\n            <p class=\"card-title-desc\">\r\n              If your form layout allows it, you can swap the\r\n              <code>.{valid|invalid}-feedback</code> classes for\r\n              <code>.{valid|invalid}-tooltip</code> classes to display\r\n              validation feedback in a styled tooltip.\r\n            </p>\r\n            <form class=\"needs-validation\" @submit.prevent=\"tooltipForm\">\r\n              <div class=\"row\">\r\n                <div class=\"col-md-4\">\r\n                  <div class=\"mb-3 position-relative\">\r\n                    <label for=\"validationTooltip01\">First name</label>\r\n                    <input\r\n                      id=\"validationTooltip01\"\r\n                      v-model=\"tooltipform.fname\"\r\n                      type=\"text\"\r\n                      class=\"form-control\"\r\n                      placeholder=\"First name\"\r\n                      :class=\"{\r\n                        'is-invalid': submitform && v$.tooltipform.fname.$error,\r\n                      }\"\r\n                    />\r\n                    <div\r\n                      v-if=\"submitted && v$.tooltipform.fname.$error\"\r\n                      class=\"invalid-feedback\"\r\n                    >\r\n                      <span v-if=\"v$.tooltipform.fname.required.$message\">{{\r\n                        v$.tooltipform.fname.required.$message\r\n                      }}</span>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div class=\"col-md-4\">\r\n                  <div class=\"mb-3 position-relative\">\r\n                    <label for=\"validationTooltip02\">Last name</label>\r\n                    <input\r\n                      id=\"validationTooltip02\"\r\n                      v-model=\"tooltipform.lname\"\r\n                      type=\"text\"\r\n                      class=\"form-control\"\r\n                      placeholder=\"Last name\"\r\n                      :class=\"{\r\n                        'is-invalid': submitform && v$.tooltipform.lname.$error,\r\n                      }\"\r\n                    />\r\n                    <div\r\n                      v-if=\"submitted && v$.tooltipform.lname.$error\"\r\n                      class=\"invalid-feedback\"\r\n                    >\r\n                      <span v-if=\"v$.tooltipform.lname.required.$message\">{{\r\n                        v$.tooltipform.lname.required.$message\r\n                      }}</span>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div class=\"col-md-4\">\r\n                  <div class=\"mb-3 position-relative\">\r\n                    <label for=\"validationTooltipUsername\">Username</label>\r\n                    <div class=\"input-group\">\r\n                      <div class=\"input-group-prepend\">\r\n                        <span\r\n                          id=\"validationTooltipUsernamePrepend\"\r\n                          class=\"input-group-text\"\r\n                          >@</span\r\n                        >\r\n                      </div>\r\n                      <input\r\n                        id=\"validationTooltipUsername\"\r\n                        v-model=\"tooltipform.username\"\r\n                        type=\"text\"\r\n                        class=\"form-control\"\r\n                        placeholder=\"Username\"\r\n                        aria-describedby=\"validationTooltipUsernamePrepend\"\r\n                        :class=\"{\r\n                          'is-invalid':\r\n                            submitform && v$.tooltipform.username.$error,\r\n                        }\"\r\n                      />\r\n                      <div\r\n                        v-if=\"submitted && v$.tooltipform.username.$error\"\r\n                        class=\"invalid-feedback\"\r\n                      >\r\n                        <span\r\n                          v-if=\"v$.tooltipform.username.required.$message\"\r\n                          >{{ v$.tooltipform.username.required.$message }}</span\r\n                        >\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div class=\"row\">\r\n                <div class=\"col-md-6\">\r\n                  <div class=\"mb-3 position-relative\">\r\n                    <label for=\"validationTooltip03\">City</label>\r\n                    <input\r\n                      id=\"validationTooltip03\"\r\n                      v-model=\"tooltipform.city\"\r\n                      type=\"text\"\r\n                      class=\"form-control\"\r\n                      placeholder=\"City\"\r\n                      :class=\"{\r\n                        'is-invalid': submitform && v$.tooltipform.city.$error,\r\n                      }\"\r\n                    />\r\n                    <div\r\n                      v-if=\"submitted && v$.tooltipform.city.$error\"\r\n                      class=\"invalid-feedback\"\r\n                    >\r\n                      <span v-if=\"v$.tooltipform.city.required.$message\">{{\r\n                        v$.tooltipform.city.required.$message\r\n                      }}</span>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div class=\"col-md-6\">\r\n                  <div class=\"mb-3 position-relative\">\r\n                    <label for=\"validationTooltip04\">State</label>\r\n                    <input\r\n                      id=\"validationTooltip04\"\r\n                      v-model=\"tooltipform.state\"\r\n                      type=\"text\"\r\n                      class=\"form-control\"\r\n                      placeholder=\"State\"\r\n                      :class=\"{\r\n                        'is-invalid': submitform && v$.tooltipform.state.$error,\r\n                      }\"\r\n                    />\r\n                    <div\r\n                      v-if=\"submitted && v$.tooltipform.state.$error\"\r\n                      class=\"invalid-feedback\"\r\n                    >\r\n                      <span v-if=\"v$.tooltipform.state.required.$message\">{{\r\n                        v$.tooltipform.state.required.$message\r\n                      }}</span>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <button class=\"btn btn-primary\" type=\"submit\">Submit form</button>\r\n            </form>\r\n          </div>\r\n        </div>\r\n        <!-- end card -->\r\n      </div>\r\n      <!-- end col -->\r\n    </div>\r\n    <!-- end row -->\r\n    <div class=\"row\">\r\n      <div class=\"col-lg-6\">\r\n        <div class=\"card\">\r\n          <div class=\"card-body\">\r\n            <h4 class=\"card-title\">Validation type</h4>\r\n            <p class=\"card-title-desc\">\r\n              Parsley is a javascript form validation library. It helps you\r\n              provide your users with feedback on their form submission before\r\n              sending it to your server.\r\n            </p>\r\n\r\n            <form action=\"#\" @submit.prevent=\"typeForm\">\r\n              <div class=\"mb-3\">\r\n                <label>Required</label>\r\n                <input\r\n                  v-model=\"typeform.name\"\r\n                  type=\"text\"\r\n                  class=\"form-control\"\r\n                  placeholder=\"Type something\"\r\n                  name=\"name\"\r\n                  :class=\"{\r\n                    'is-invalid': typesubmit && v$.typeform.name.$error,\r\n                  }\"\r\n                />\r\n                <div\r\n                  v-if=\"submitted && v$.typeform.name.$error\"\r\n                  class=\"invalid-feedback\"\r\n                >\r\n                  <span v-if=\"v$.typeform.name.required.$message\">{{\r\n                    v$.typeform.name.required.$message\r\n                  }}</span>\r\n                </div>\r\n              </div>\r\n\r\n              <div class=\"mb-3\">\r\n                <label>Equal To</label>\r\n                <div>\r\n                  <input\r\n                    v-model=\"typeform.password\"\r\n                    type=\"password\"\r\n                    name=\"password\"\r\n                    class=\"form-control\"\r\n                    :class=\"{\r\n                      'is-invalid': typesubmit && v$.typeform.password.$error,\r\n                    }\"\r\n                    placeholder=\"Password\"\r\n                  />\r\n                  <div\r\n                    v-for=\"(item, index) in v$.typeform.password.$errors\"\r\n                    :key=\"index\"\r\n                    class=\"invalid-feedback\"\r\n                  >\r\n                    <span v-if=\"item.$message\">{{ item.$message }}</span>\r\n                  </div>\r\n                </div>\r\n                <div class=\"mt-2\">\r\n                  <input\r\n                    v-model=\"typeform.confirmPassword\"\r\n                    type=\"password\"\r\n                    name=\"confirmPassword\"\r\n                    class=\"form-control\"\r\n                    :class=\"{\r\n                      'is-invalid':\r\n                        typesubmit && v$.typeform.confirmPassword.$error,\r\n                    }\"\r\n                    placeholder=\"Re-Type Password\"\r\n                  />\r\n                  <div\r\n                    v-for=\"(item, index) in v$.typeform.confirmPassword.$errors\"\r\n                    :key=\"index\"\r\n                    class=\"invalid-feedback\"\r\n                  >\r\n                    <span v-if=\"item.$message\">{{ item.$message }}</span>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              <div class=\"mb-3\">\r\n                <label>E-Mail</label>\r\n                <div>\r\n                  <input\r\n                    v-model=\"typeform.email\"\r\n                    type=\"email\"\r\n                    name=\"email\"\r\n                    class=\"form-control\"\r\n                    :class=\"{\r\n                      'is-invalid': typesubmit && v$.typeform.email.$error,\r\n                    }\"\r\n                    placeholder=\"Enter a valid e-mail\"\r\n                  />\r\n                  <div\r\n                    v-for=\"(item, index) in v$.typeform.email.$errors\"\r\n                    :key=\"index\"\r\n                    class=\"invalid-feedback\"\r\n                  >\r\n                    <span v-if=\"item.$message\">{{ item.$message }}</span>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div class=\"mb-3\">\r\n                <label>URL</label>\r\n                <div>\r\n                  <input\r\n                    v-model=\"typeform.url\"\r\n                    type=\"url\"\r\n                    name=\"url\"\r\n                    class=\"form-control\"\r\n                    placeholder=\"URL\"\r\n                    :class=\"{\r\n                      'is-invalid': typesubmit && v$.typeform.url.$error,\r\n                    }\"\r\n                  />\r\n                  <div\r\n                    v-for=\"(item, index) in v$.typeform.url.$errors\"\r\n                    :key=\"index\"\r\n                    class=\"invalid-feedback\"\r\n                  >\r\n                    <span v-if=\"item.$message\">{{ item.$message }}</span>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div class=\"mb-3\">\r\n                <label>Digits</label>\r\n                <div>\r\n                  <input\r\n                    v-model=\"typeform.digit\"\r\n                    type=\"text\"\r\n                    name=\"digit\"\r\n                    class=\"form-control\"\r\n                    :class=\"{\r\n                      'is-invalid': typesubmit && v$.typeform.digit.$error,\r\n                    }\"\r\n                    placeholder=\"Enter only digits\"\r\n                  />\r\n                  <div\r\n                    v-for=\"(item, index) in v$.typeform.digit.$errors\"\r\n                    :key=\"index\"\r\n                    class=\"invalid-feedback\"\r\n                  >\r\n                    <span v-if=\"item.$message\">{{ item.$message }}</span>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div class=\"mb-3\">\r\n                <label>Number</label>\r\n                <div>\r\n                  <input\r\n                    v-model=\"typeform.number\"\r\n                    type=\"text\"\r\n                    name=\"number\"\r\n                    class=\"form-control\"\r\n                    :class=\"{\r\n                      'is-invalid': typesubmit && v$.typeform.number.$error,\r\n                    }\"\r\n                    placeholder=\"Enter only numbers\"\r\n                  />\r\n                  <div\r\n                    v-for=\"(item, index) in v$.typeform.number.$errors\"\r\n                    :key=\"index\"\r\n                    class=\"invalid-feedback\"\r\n                  >\r\n                    <span v-if=\"item.$message\">{{ item.$message }}</span>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div class=\"mb-3\">\r\n                <label>Alphanumeric</label>\r\n                <div>\r\n                  <input\r\n                    v-model=\"typeform.alphanum\"\r\n                    type=\"text\"\r\n                    name=\"alphanum\"\r\n                    class=\"form-control\"\r\n                    :class=\"{\r\n                      'is-invalid': typesubmit && v$.typeform.alphanum.$error,\r\n                    }\"\r\n                    placeholder=\"Enter alphanumeric value\"\r\n                  />\r\n                  <div\r\n                    v-for=\"(item, index) in v$.typeform.alphanum.$errors\"\r\n                    :key=\"index\"\r\n                    class=\"invalid-feedback\"\r\n                  >\r\n                    <span v-if=\"item.$message\">{{ item.$message }}</span>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div class=\"mb-3\">\r\n                <label>Textarea</label>\r\n                <div>\r\n                  <textarea\r\n                    v-model=\"typeform.textarea\"\r\n                    class=\"form-control\"\r\n                    name=\"textarea\"\r\n                    :class=\"{\r\n                      'is-invalid': typesubmit && v$.typeform.textarea.$error,\r\n                    }\"\r\n                    rows=\"5\"\r\n                  ></textarea>\r\n                  <div\r\n                    v-if=\"typesubmit && v$.typeform.textarea.$error\"\r\n                    class=\"invalid-feedback\"\r\n                  >\r\n                    <span v-if=\"!v$.typeform.textarea.required\"\r\n                      >This value is required.</span\r\n                    >\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div class=\"mb-3 mb-0\">\r\n                <div>\r\n                  <button type=\"submit\" class=\"btn btn-primary\">Submit</button>\r\n                  <button type=\"reset\" class=\"btn btn-secondary ms-1\">\r\n                    Cancel\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </form>\r\n          </div>\r\n        </div>\r\n        <!-- end card -->\r\n      </div>\r\n      <!-- end col-->\r\n\r\n      <div class=\"col-lg-6\">\r\n        <div class=\"card\">\r\n          <div class=\"card-body\">\r\n            <h4 class=\"card-title\">Range validation</h4>\r\n            <p class=\"card-title-desc\">\r\n              Parsley is a javascript form validation library. It helps you\r\n              provide your users with feedback on their form submission before\r\n              sending it to your server.\r\n            </p>\r\n\r\n            <form action=\"#\" @submit.prevent=\"rangeform\">\r\n              <div class=\"mb-3\">\r\n                <label>Min Length</label>\r\n                <div>\r\n                  <input\r\n                    v-model=\"range.minlen\"\r\n                    type=\"text\"\r\n                    name=\"minlen\"\r\n                    class=\"form-control\"\r\n                    :class=\"{ 'is-invalid': submit && v$.range.minlen.$error }\"\r\n                    placeholder=\"Min 6 chars.\"\r\n                  />\r\n                    <div\r\n                  v-for=\"(item, index) in v$.range.minlen.$errors\"\r\n                  :key=\"index\"\r\n                  class=\"invalid-feedback\"\r\n                >\r\n                  <span v-if=\"item.$message\">{{ item.$message }}</span>\r\n                </div>\r\n                </div>\r\n              </div>\r\n              <div class=\"mb-3\">\r\n                <label>Max Length</label>\r\n                <div>\r\n                  <input\r\n                    v-model=\"range.maxlength\"\r\n                    type=\"text\"\r\n                    class=\"form-control\"\r\n                    name=\"maxlength\"\r\n                    :class=\"{\r\n                      'is-invalid': submit && v$.range.maxlength.$error,\r\n                    }\"\r\n                    placeholder=\"Max 6 chars.\"\r\n                  />\r\n                 <div\r\n                  v-for=\"(item, index) in v$.range.maxlength.$errors\"\r\n                  :key=\"index\"\r\n                  class=\"invalid-feedback\"\r\n                >\r\n                  <span v-if=\"item.$message\">{{ item.$message }}</span>\r\n                </div>\r\n                </div>\r\n              </div>\r\n              <div class=\"mb-3\">\r\n                <label>Range Length</label>\r\n                <div>\r\n                  <input\r\n                    v-model=\"range.between\"\r\n                    type=\"text\"\r\n                    class=\"form-control\"\r\n                    name=\"between\"\r\n                    :class=\"{ 'is-invalid': submit && v$.range.between.$error }\"\r\n                    placeholder=\"Text between 5 - 10 chars length\"\r\n                  />\r\n                 <div\r\n                  v-for=\"(item, index) in v$.range.between.$errors\"\r\n                  :key=\"index\"\r\n                  class=\"invalid-feedback\"\r\n                >\r\n                  <span v-if=\"item.$message\">{{ item.$message }}</span>\r\n                </div>\r\n                </div>\r\n              </div>\r\n              <div class=\"mb-3\">\r\n                <label>Min Value</label>\r\n                <div>\r\n                  <input\r\n                    v-model=\"range.minval\"\r\n                    type=\"text\"\r\n                    name=\"minval\"\r\n                    class=\"form-control\"\r\n                    :class=\"{ 'is-invalid': submit && v$.range.minval.$error }\"\r\n                    placeholder=\"Min value is 6\"\r\n                  />\r\n                  <div\r\n                  v-for=\"(item, index) in v$.range.minval.$errors\"\r\n                  :key=\"index\"\r\n                  class=\"invalid-feedback\"\r\n                >\r\n                  <span v-if=\"item.$message\">{{ item.$message }}</span>\r\n                </div>\r\n                </div>\r\n              </div>\r\n              <div class=\"mb-3\">\r\n                <label>Max Value</label>\r\n                <div>\r\n                  <input\r\n                    v-model=\"range.maxval\"\r\n                    type=\"text\"\r\n                    class=\"form-control\"\r\n                    name=\"maxval\"\r\n                    :class=\"{ 'is-invalid': submit && v$.range.maxval.$error }\"\r\n                    placeholder=\"Max value is 6\"\r\n                  />\r\n                 <div\r\n                  v-for=\"(item, index) in v$.range.maxval.$errors\"\r\n                  :key=\"index\"\r\n                  class=\"invalid-feedback\"\r\n                >\r\n                  <span v-if=\"item.$message\">{{ item.$message }}</span>\r\n                </div>\r\n                </div>\r\n              </div>\r\n              <div class=\"mb-3\">\r\n                <label>Range Value</label>\r\n                <div>\r\n                  <input\r\n                    v-model=\"range.rangeval\"\r\n                    type=\"text\"\r\n                    class=\"form-control\"\r\n                    name=\"rangeval\"\r\n                    :class=\"{\r\n                      'is-invalid': submit && v$.range.rangeval.$error,\r\n                    }\"\r\n                    placeholder=\"Number between 6 - 100\"\r\n                  />\r\n                 <div\r\n                  v-for=\"(item, index) in v$.range.rangeval.$errors\"\r\n                  :key=\"index\"\r\n                  class=\"invalid-feedback\"\r\n                >\r\n                  <span v-if=\"item.$message\">{{ item.$message }}</span>\r\n                </div>\r\n                </div>\r\n              </div>\r\n              <div class=\"mb-3\">\r\n                <label>Regular Exp</label>\r\n                <div>\r\n                  <input\r\n                    v-model=\"range.expr\"\r\n                    type=\"text\"\r\n                    class=\"form-control\"\r\n                    name=\"expr\"\r\n                    :class=\"{ 'is-invalid': submit && v$.range.expr.$error }\"\r\n                    placeholder=\"Hex. Color\"\r\n                  />\r\n                   <div\r\n                  v-for=\"(item, index) in v$.range.expr.$errors\"\r\n                  :key=\"index\"\r\n                  class=\"invalid-feedback\"\r\n                >\r\n                  <span v-if=\"item.$message\">{{ item.$message }}</span>\r\n                </div>\r\n                </div>\r\n              </div>\r\n\r\n              <div class=\"mb-3 mb-0\">\r\n                <div>\r\n                  <button type=\"submit\" class=\"btn btn-primary\">Submit</button>\r\n                  <button type=\"reset\" class=\"btn btn-secondary ms-1\">\r\n                    Cancel\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </form>\r\n          </div>\r\n        </div>\r\n        <!-- end card -->\r\n      </div>\r\n      <!-- end col -->\r\n    </div>\r\n    <!-- end row -->\r\n  </Layout>\r\n</template>","import { render } from \"./validation.vue?vue&type=template&id=6eeba57e\"\nimport script from \"./validation.vue?vue&type=script&lang=js\"\nexport * from \"./validation.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"D:\\\\www\\\\cvisual_code\\\\Admin_Frontend\\\\node_modules\\\\vue-loader-v16\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { unref } from 'vue-demi';\n\nfunction isFunction(val) {\n  return typeof val === 'function';\n}\nfunction isObject(o) {\n  return o !== null && typeof o === 'object' && !Array.isArray(o);\n}\n/**\n * Returns a standard ValidatorObject\n * Wraps a plain function into a ValidatorObject\n * @param {NormalizedValidator|Function} validator\n * @return {NormalizedValidator}\n */\n\nfunction normalizeValidatorObject(validator) {\n  return isFunction(validator.$validator) ? Object.assign({}, validator) : {\n    $validator: validator\n  };\n}\nfunction isPromise(object) {\n  return isObject(object) && isFunction(object.then);\n}\n/**\n * Unwraps a ValidatorResponse object, into a boolean.\n * @param {ValidatorResponse} result\n * @return {boolean}\n */\n\nfunction unwrapValidatorResponse(result) {\n  if (typeof result === 'object') return result.$valid;\n  return result;\n}\n/**\n * Unwraps a `NormalizedValidator` object, returning its validator function.\n * @param {NormalizedValidator | Function} validator\n * @return {function}\n */\n\nfunction unwrapNormalizedValidator(validator) {\n  return validator.$validator || validator;\n}\n\n/**\n * Allows attaching parameters to a validator\n * @param {Object} $params\n * @param {NormalizedValidator|Function} $validator\n * @return {NormalizedValidator}\n */\n\nfunction withParams($params, $validator) {\n  if (!isObject($params)) throw new Error(`[@vuelidate/validators]: First parameter to \"withParams\" should be an object, provided ${typeof $params}`);\n  if (!isObject($validator) && !isFunction($validator)) throw new Error(`[@vuelidate/validators]: Validator must be a function or object with $validator parameter`);\n  const validatorObj = normalizeValidatorObject($validator);\n  validatorObj.$params = Object.assign({}, validatorObj.$params || {}, $params);\n  return validatorObj;\n}\n\n/**\n * @callback MessageCallback\n * @param {Object} params\n * @return String\n */\n\n/**\n * Attaches a message to a validator\n * @param {MessageCallback | String} $message\n * @param {NormalizedValidator|Function} $validator\n * @return {NormalizedValidator}\n */\n\nfunction withMessage($message, $validator) {\n  if (!isFunction($message) && typeof unref($message) !== 'string') throw new Error(`[@vuelidate/validators]: First parameter to \"withMessage\" should be string or a function returning a string, provided ${typeof $message}`);\n  if (!isObject($validator) && !isFunction($validator)) throw new Error(`[@vuelidate/validators]: Validator must be a function or object with $validator parameter`);\n  const validatorObj = normalizeValidatorObject($validator);\n  validatorObj.$message = $message;\n  return validatorObj;\n}\n\n/**\n * @typedef {function(*): Promise<boolean|ValidatorResponse>} asyncValidator\n */\n\n/**\n * @typedef {Ref<*>[]|function(*): *} watchTargets\n */\n\n/**\n * Wraps validators that returns a Promise.\n * @param {asyncValidator} $validator\n * @param {watchTargets} $watchTargets\n * @return {{$async: boolean, $validator: asyncValidator, $watchTargets: watchTargets}}\n */\n\nfunction withAsync($validator, $watchTargets = []) {\n  const validatorObj = normalizeValidatorObject($validator);\n  return Object.assign({}, validatorObj, {\n    $async: true,\n    $watchTargets\n  });\n}\n\nfunction forEach(validators) {\n  return {\n    $validator(collection, ...others) {\n      // go over the collection. It can be a ref as well.\n      return unref(collection).reduce((previous, collectionItem) => {\n        // go over each property\n        const collectionEntryResult = Object.entries(collectionItem).reduce((all, [property, $model]) => {\n          // get the validators for this property\n          const innerValidators = validators[property] || {}; // go over each validator and run it\n\n          const propertyResult = Object.entries(innerValidators).reduce((all, [validatorName, currentValidator]) => {\n            // extract the validator. Supports simple and extended validators.\n            const validatorFunction = unwrapNormalizedValidator(currentValidator); // Call the validator, passing the VM as this, the value, current iterated object and the rest.\n\n            const $response = validatorFunction.call(this, $model, collectionItem, ...others); // extract the valid from the result\n\n            const $valid = unwrapValidatorResponse($response); // store the entire response for later\n\n            all.$data[validatorName] = $response;\n            all.$data.$invalid = !$valid || !!all.$data.$invalid;\n            all.$data.$error = all.$data.$invalid; // if not valid, get the $message\n\n            if (!$valid) {\n              let $message = currentValidator.$message || '';\n              const $params = currentValidator.$params || {}; // If $message is a function, we call it with the appropriate parameters\n\n              if (typeof $message === 'function') {\n                $message = $message({\n                  $pending: false,\n                  $invalid: !$valid,\n                  $params,\n                  $model,\n                  $response\n                });\n              } // save the error object\n\n\n              all.$errors.push({\n                $property: property,\n                $message,\n                $params,\n                $response,\n                $model,\n                $pending: false,\n                $validator: validatorName\n              });\n            }\n\n            return {\n              $valid: all.$valid && $valid,\n              $data: all.$data,\n              $errors: all.$errors\n            };\n          }, {\n            $valid: true,\n            $data: {},\n            $errors: []\n          });\n          all.$data[property] = propertyResult.$data;\n          all.$errors[property] = propertyResult.$errors;\n          return {\n            $valid: all.$valid && propertyResult.$valid,\n            $data: all.$data,\n            $errors: all.$errors\n          };\n        }, {\n          $valid: true,\n          $data: {},\n          $errors: {}\n        });\n        return {\n          $valid: previous.$valid && collectionEntryResult.$valid,\n          $data: previous.$data.concat(collectionEntryResult.$data),\n          $errors: previous.$errors.concat(collectionEntryResult.$errors)\n        };\n      }, {\n        $valid: true,\n        $data: [],\n        $errors: []\n      });\n    },\n\n    // collect all the validation errors into a 2 dimensional array, for each entry in the collection, you have an array of error messages.\n    $message: ({\n      $response\n    }) => $response ? $response.$errors.map(context => {\n      return Object.values(context).map(errors => errors.map(error => error.$message)).reduce((a, b) => a.concat(b), []);\n    }) : []\n  };\n}\n\n// \"required\" core, used in almost every validator to allow empty values\nconst req = value => {\n  value = unref(value);\n  if (Array.isArray(value)) return !!value.length;\n\n  if (value === undefined || value === null) {\n    return false;\n  }\n\n  if (value === false) {\n    return true;\n  }\n\n  if (value instanceof Date) {\n    // invalid date won't pass\n    return !isNaN(value.getTime());\n  }\n\n  if (typeof value === 'object') {\n    for (let _ in value) return true;\n\n    return false;\n  }\n\n  return !!String(value).length;\n};\n/**\n * Returns the length of an arbitrary value\n * @param {Array|Object|String} value\n * @return {number}\n */\n\nconst len = value => {\n  value = unref(value);\n  if (Array.isArray(value)) return value.length;\n\n  if (typeof value === 'object') {\n    return Object.keys(value).length;\n  }\n\n  return String(value).length;\n};\n/**\n * Regex based validator template\n * @param {RegExp} expr\n * @return {function(*=): boolean}\n */\n\nfunction regex(expr) {\n  return value => {\n    value = unref(value);\n    return !req(value) || expr.test(value);\n  };\n}\n\nvar common = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  withParams: withParams,\n  withMessage: withMessage,\n  withAsync: withAsync,\n  forEach: forEach,\n  req: req,\n  len: len,\n  regex: regex,\n  unwrap: unref,\n  unwrapNormalizedValidator: unwrapNormalizedValidator,\n  unwrapValidatorResponse: unwrapValidatorResponse,\n  normalizeValidatorObject: normalizeValidatorObject\n});\n\nvar alpha$1 = regex(/^[a-zA-Z]*$/);\n\n/**\n * Validate if value is alphabetical string.\n * @type {NormalizedValidator}\n */\n\nvar alpha = {\n  $validator: alpha$1,\n  $message: 'The value is not alphabetical',\n  $params: {\n    type: 'alpha'\n  }\n};\n\nvar alphaNum$1 = regex(/^[a-zA-Z0-9]*$/);\n\n/**\n * Validate if value is alpha-numeric string.\n * @type {NormalizedValidator}\n */\n\nvar alphaNum = {\n  $validator: alphaNum$1,\n  $message: 'The value must be alpha-numeric',\n  $params: {\n    type: 'alphaNum'\n  }\n};\n\nvar numeric$1 = regex(/^\\d*(\\.\\d+)?$/);\n\n/**\n * Check whether a value is numeric.\n * @type NormalizedValidator\n */\n\nvar numeric = {\n  $validator: numeric$1,\n  $message: 'Value must be numeric',\n  $params: {\n    type: 'numeric'\n  }\n};\n\n/**\n * Check if a numeric value is between two values.\n * @param {Ref<Number> | Number} min\n * @param {Ref<Number> | Number} max\n * @return {function(*=): boolean}\n */\n\nfunction between$1 (min, max) {\n  return value => !req(value) || (!/\\s/.test(value) || value instanceof Date) && +unref(min) <= +value && +unref(max) >= +value;\n}\n\n/**\n * Checks if a value is between two values.\n * @param {Ref<Number> | Number} min\n * @param {Ref<Number> | Number} max\n * @return {NormalizedValidator}\n */\n\nfunction between (min, max) {\n  return {\n    $validator: between$1(min, max),\n    $message: ({\n      $params\n    }) => `The value must be between ${$params.min} and ${$params.max}`,\n    $params: {\n      min,\n      max,\n      type: 'between'\n    }\n  };\n}\n\nconst emailRegex = /^(?:[A-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[A-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9]{2,}(?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])$/i;\nvar email$1 = regex(emailRegex);\n\n/**\n * Validate if value is an email.\n * @type {NormalizedValidator}\n */\n\nvar email = {\n  $validator: email$1,\n  $message: 'Value is not a valid email address',\n  $params: {\n    type: 'email'\n  }\n};\n\n/**\n * Check if a string is an IP Address\n * @param {String} value\n * @returns {boolean}\n */\n\nfunction ipAddress$1 (value) {\n  if (!req(value)) {\n    return true;\n  }\n\n  if (typeof value !== 'string') {\n    return false;\n  }\n\n  const nibbles = value.split('.');\n  return nibbles.length === 4 && nibbles.every(nibbleValid);\n}\n\nconst nibbleValid = nibble => {\n  if (nibble.length > 3 || nibble.length === 0) {\n    return false;\n  }\n\n  if (nibble[0] === '0' && nibble !== '0') {\n    return false;\n  }\n\n  if (!nibble.match(/^\\d+$/)) {\n    return false;\n  }\n\n  const numeric = +nibble | 0;\n  return numeric >= 0 && numeric <= 255;\n};\n\n/**\n * Validate if value is an ipAddress string.\n * @type {NormalizedValidator}\n */\n\nvar ipAddress = {\n  $validator: ipAddress$1,\n  $message: 'The value is not a valid IP address',\n  $params: {\n    type: 'ipAddress'\n  }\n};\n\n/**\n * Check if value is a properly formatted Mac Address.\n * @param {String | Ref<String>} [separator]\n * @returns {function(*): boolean}\n */\n\nfunction macAddress$1 (separator = ':') {\n  return value => {\n    separator = unref(separator);\n\n    if (!req(value)) {\n      return true;\n    }\n\n    if (typeof value !== 'string') {\n      return false;\n    }\n\n    const parts = typeof separator === 'string' && separator !== '' ? value.split(separator) : value.length === 12 || value.length === 16 ? value.match(/.{2}/g) : null;\n    return parts !== null && (parts.length === 6 || parts.length === 8) && parts.every(hexValid);\n  };\n}\n\nconst hexValid = hex => hex.toLowerCase().match(/^[0-9a-f]{2}$/);\n\n/**\n * Validate if value is a valid Mac Address string.\n * @returns {NormalizedValidator}\n */\n\nfunction macAddress (separator) {\n  return {\n    $validator: macAddress$1(separator),\n    $message: 'The value is not a valid MAC Address',\n    $params: {\n      type: 'macAddress'\n    }\n  };\n}\n\n/**\n * Check if provided value has a maximum length\n * @param {Number | Ref<Number>} length\n * @returns {function(Array|Object|String): boolean}\n */\n\nfunction maxLength$1 (length) {\n  return value => !req(value) || len(value) <= unref(length);\n}\n\n/**\n * Validate the max length of a string.\n * @param {Number} max\n * @return {NormalizedValidator}\n */\n\nfunction maxLength (max) {\n  return {\n    $validator: maxLength$1(max),\n    $message: ({\n      $params\n    }) => `The maximum length allowed is ${$params.max}`,\n    $params: {\n      max,\n      type: 'maxLength'\n    }\n  };\n}\n\n/**\n * Check if value is above a threshold.\n * @param {Number | Ref<Number>} length\n * @returns {function(Array|Object|String): boolean}\n */\n\nfunction minLength$1 (length) {\n  return value => !req(value) || len(value) >= unref(length);\n}\n\n/**\n * Check if value is above a threshold.\n * @param {Number | Ref<Number>} min\n * @returns {NormalizedValidator}\n */\n\nfunction minLength (min) {\n  return {\n    $validator: minLength$1(min),\n    $message: ({\n      $params\n    }) => `This field should be at least ${$params.min} long`,\n    $params: {\n      min,\n      type: 'minLength'\n    }\n  };\n}\n\n/**\n * Validates if a value is empty.\n * @param {String | Array | Date | Object} value\n * @returns {boolean}\n */\n\nfunction required$1 (value) {\n  if (typeof value === 'string') {\n    value = value.trim();\n  }\n\n  return req(value);\n}\n\n/**\n * Check if a value is empty or not.\n * @type {NormalizedValidator}\n */\n\nvar required = {\n  $validator: required$1,\n  $message: 'Value is required',\n  $params: {\n    type: 'required'\n  }\n};\n\nconst validate$1 = (prop, val) => prop ? req(val) : true;\n/**\n * Returns required if the passed property is truthy\n * @param {Boolean | String | function(any): Boolean | Ref<string | boolean>} propOrFunction\n * @return {function(value: *, parentVM: object): Boolean}\n */\n\n\nfunction requiredIf$1(propOrFunction) {\n  return function (value, parentVM) {\n    if (typeof propOrFunction !== 'function') {\n      return validate$1(unref(propOrFunction), value);\n    }\n\n    const result = propOrFunction.call(this, value, parentVM);\n    return validate$1(result, value);\n  };\n}\n\n/**\n * Returns required if the passed property is truthy\n * @param {Boolean | String | function(): (Boolean | Promise<boolean>)} prop\n * @return {NormalizedValidator}\n */\n\nfunction requiredIf (prop) {\n  return {\n    $validator: requiredIf$1(prop),\n    $message: 'The value is required',\n    $params: {\n      type: 'requiredIf',\n      prop\n    }\n  };\n}\n\nconst validate = (prop, val) => !prop ? req(val) : true;\n/**\n * Returns required if the passed property is falsy.\n * @param {Boolean | String | function(any): Boolean | Ref<string | boolean>} propOrFunction\n * @return {function(value: *, parentVM: object): Boolean}\n */\n\n\nfunction requiredUnless$1(propOrFunction) {\n  return function (value, parentVM) {\n    if (typeof propOrFunction !== 'function') {\n      return validate(unref(propOrFunction), value);\n    }\n\n    const result = propOrFunction.call(this, value, parentVM);\n    return validate(result, value);\n  };\n}\n\n/**\n * Returns required unless the passed property is truthy\n * @param {Boolean | String | function(): (Boolean | Promise<boolean>)} prop\n * @return {NormalizedValidator}\n */\n\nfunction requiredUnless (prop) {\n  return {\n    $validator: requiredUnless$1(prop),\n    $message: 'The value is required',\n    $params: {\n      type: 'requiredUnless',\n      prop\n    }\n  };\n}\n\n/**\n * Check if two values are identical.\n * @param {*} equalTo\n * @return {function(*=): boolean}\n */\n\nfunction sameAs$1 (equalTo) {\n  return value => unref(value) === unref(equalTo);\n}\n\n/**\n * Check if two values are identical\n * @param {*} equalTo\n * @param {String} [otherName]\n * @return {NormalizedValidator}\n */\n\nfunction sameAs (equalTo, otherName = 'other') {\n  return {\n    $validator: sameAs$1(equalTo),\n    $message: ({\n      $params\n    }) => `The value must be equal to the ${otherName} value`,\n    $params: {\n      equalTo,\n      otherName,\n      type: 'sameAs'\n    }\n  };\n}\n\n/**\n * Regex taken from {@link https://gist.github.com/dperini/729294}\n */\n\nconst urlRegex = /^(?:(?:(?:https?|ftp):)?\\/\\/)(?:\\S+(?::\\S*)?@)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z0-9\\u00a1-\\uffff][a-z0-9\\u00a1-\\uffff_-]{0,62})?[a-z0-9\\u00a1-\\uffff]\\.)+(?:[a-z\\u00a1-\\uffff]{2,}\\.?))(?::\\d{2,5})?(?:[/?#]\\S*)?$/i;\nvar url$1 = regex(urlRegex);\n\n/**\n * Check if a value is a url\n * @type {NormalizedValidator}\n */\n\nvar url = {\n  $validator: url$1,\n  $message: 'The value is not a valid URL address',\n  $params: {\n    type: 'url'\n  }\n};\n\nfunction _await$1(value, then, direct) {\n  if (direct) {\n    return then ? then(value) : value;\n  }\n\n  if (!value || !value.then) {\n    value = Promise.resolve(value);\n  }\n\n  return then ? value.then(then) : value;\n}\n\nfunction syncOr(validators) {\n  return function (...args) {\n    return validators.reduce((valid, fn) => {\n      if (unwrapValidatorResponse(valid)) return valid;\n      return unwrapNormalizedValidator(fn).apply(this, args);\n    }, false);\n  };\n}\n\nfunction asyncOr(validators) {\n  return function (...args) {\n    const _this = this;\n\n    return validators.reduce(function (valid, fn) {\n      return _await$1(valid, function (r) {\n        return unwrapValidatorResponse(r) ? r : unwrapNormalizedValidator(fn).apply(_this, args);\n      });\n    }, Promise.resolve(false));\n  };\n}\n/**\n * Returns true when one of the provided functions returns true.\n * @param {...(NormalizedValidator|Function)} validators\n * @return {{$validator: function(...[*]=): (boolean | Promise<boolean>), $async: boolean, $watchTargets: any[]}}\n */\n\n\nfunction or$1(...validators) {\n  const $async = validators.some(v => v.$async);\n  const $watchTargets = validators.reduce((all, v) => {\n    if (!v.$watchTargets) return all;\n    return all.concat(v.$watchTargets);\n  }, []);\n\n  let $validator = () => false;\n\n  if (validators.length) $validator = $async ? asyncOr(validators) : syncOr(validators);\n  return {\n    $async,\n    $validator,\n    $watchTargets\n  };\n}\n\n/**\n * Returns true when one of the provided functions returns true.\n * @param {...(NormalizedValidator|Function)} validators\n * @return {NormalizedValidator}\n */\n\nfunction or (...validators) {\n  return withParams({\n    type: 'or'\n  }, withMessage('The value does not match any of the provided validators', or$1(...validators)));\n}\n\nfunction _await(value, then, direct) {\n  if (direct) {\n    return then ? then(value) : value;\n  }\n\n  if (!value || !value.then) {\n    value = Promise.resolve(value);\n  }\n\n  return then ? value.then(then) : value;\n}\n/**\n *\n * @param validators\n * @return {function(...[*]=): Promise<boolean>}\n */\n\n\nfunction syncAnd(validators) {\n  return function (...args) {\n    return validators.reduce((valid, fn) => {\n      if (!unwrapValidatorResponse(valid)) return valid;\n      return unwrapNormalizedValidator(fn).apply(this, args);\n    }, true);\n  };\n}\n\nfunction asyncAnd(validators) {\n  return function (...args) {\n    const _this = this;\n\n    return validators.reduce(function (valid, fn) {\n      return _await(valid, function (r) {\n        return unwrapValidatorResponse(r) ? unwrapNormalizedValidator(fn).apply(_this, args) : r;\n      });\n    }, Promise.resolve(true));\n  };\n}\n/**\n * Returns true when all validators are truthy\n * @param {...(NormalizedValidator | Function)} validators\n * @return {{$validator: function(...[*]=): (boolean | Promise<boolean>), $async: boolean, $watchTargets: any[]}}\n */\n\n\nfunction and$1(...validators) {\n  const $async = validators.some(v => v.$async);\n  const $watchTargets = validators.reduce((all, v) => {\n    if (!v.$watchTargets) return all;\n    return all.concat(v.$watchTargets);\n  }, []);\n\n  let $validator = () => false;\n\n  if (validators.length) $validator = $async ? asyncAnd(validators) : syncAnd(validators);\n  return {\n    $async,\n    $validator,\n    $watchTargets\n  };\n}\n\n/**\n * Validate if all validators match.\n * @param {...*} validators\n * @returns {NormalizedValidator}\n */\n\nfunction and (...validators) {\n  return withParams({\n    type: 'and'\n  }, withMessage('The value does not match all of the provided validators', and$1(...validators)));\n}\n\n/**\n * Swaps the result of a value\n * @param {NormalizedValidator|Function} validator\n * @returns {function(*=, *=): boolean}\n */\n\nfunction not$1 (validator) {\n  return function (value, vm) {\n    if (!req(value)) return true;\n    const response = unwrapNormalizedValidator(validator).call(this, value, vm);\n    if (!isPromise(response)) return !unwrapValidatorResponse(response);\n    return response.then(r => !unwrapValidatorResponse(r));\n  };\n}\n\n/**\n * Swaps the result of a value\n * @param {NormalizedValidator|Function} validator\n * @returns {NormalizedValidator}\n */\n\nfunction not (validator) {\n  return {\n    $validator: not$1(validator),\n    $message: `The value does not match the provided validator`,\n    $params: {\n      type: 'not'\n    }\n  };\n}\n\n/**\n * Check if a value is above a threshold.\n * @param {String | Number | Ref<Number> | Ref<String>} min\n * @returns {function(*=): boolean}\n */\n\nfunction minValue$1 (min) {\n  return value => !req(value) || (!/\\s/.test(value) || value instanceof Date) && +value >= +unref(min);\n}\n\n/**\n * Check if a value is above a threshold.\n * @param {String | Number | Ref<Number> | Ref<String>} min\n * @returns {NormalizedValidator}\n */\n\nfunction minValue (min) {\n  return {\n    $validator: minValue$1(min),\n    $message: ({\n      $params\n    }) => `The minimum value allowed is ${$params.min}`,\n    $params: {\n      min,\n      type: 'minValue'\n    }\n  };\n}\n\n/**\n * Check if value is below a threshold.\n * @param {Number | Ref<Number> | Ref<String>} max\n * @returns {function(*=): boolean}\n */\n\nfunction maxValue$1 (max) {\n  return value => !req(value) || (!/\\s/.test(value) || value instanceof Date) && +value <= +unref(max);\n}\n\n/**\n * Check if value is below a threshold.\n * @param {Number | Ref<Number> | Ref<String>} max\n * @return {NormalizedValidator}\n */\n\nvar maxValue = (max => ({\n  $validator: maxValue$1(max),\n  $message: ({\n    $params\n  }) => `The maximum value is ${$params.max}`,\n  $params: {\n    max,\n    type: 'maxValue'\n  }\n}));\n\n// ^-[0-9]+$ - only for negative integer (minus sign without at least 1 digit is not a number)\n\nvar integer$1 = regex(/(^[0-9]*$)|(^-[0-9]+$)/);\n\n/**\n * Validate if value is integer.\n * @type {NormalizedValidator}\n */\n\nvar integer = {\n  $validator: integer$1,\n  $message: 'Value is not an integer',\n  $params: {\n    type: 'integer'\n  }\n};\n\nvar decimal$1 = regex(/^[-]?\\d*(\\.\\d+)?$/);\n\n/**\n * Validate if value is decimal number.\n * @type {NormalizedValidator}\n */\n\nvar decimal = {\n  $validator: decimal$1,\n  $message: 'Value must be decimal',\n  $params: {\n    type: 'decimal'\n  }\n};\n\n/**\n * Creates a translatable version of `withMessage` helper.\n * @param {function} t - the translation function of your choice\n * @param {function} [messagePath] - a function to generate the message path, passed to `t` for each message. By default it is `validations.${$validator}`\n * @param {function} [messageParams] - a function to augment the params, passed to `t` for each message.\n */\n\nfunction createI18nMessage({\n  t,\n  messagePath = ({\n    $validator\n  }) => `validations.${$validator}`,\n  messageParams = params => params\n}) {\n  return function withI18nMessage(validator, {\n    withArguments = false,\n    messagePath: localMessagePath = messagePath,\n    messageParams: localMessageParams = messageParams\n  } = {}) {\n    function message(props) {\n      return t(localMessagePath(props), localMessageParams(Object.assign({\n        model: props.$model,\n        property: props.$property,\n        pending: props.$pending,\n        invalid: props.$invalid,\n        response: props.$response,\n        validator: props.$validator,\n        propertyPath: props.$propertyPath\n      }, props.$params)));\n    }\n\n    if (withArguments && typeof validator === 'function') {\n      return (...args) => withMessage(message, validator(...args));\n    }\n\n    return withMessage(message, validator);\n  };\n}\n\nexport { alpha, alphaNum, and, between, createI18nMessage, decimal, email, common as helpers, integer, ipAddress, macAddress, maxLength, maxValue, minLength, minValue, not, numeric, or, required, requiredIf, requiredUnless, sameAs, url };\n"],"sourceRoot":""}